/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2017, 2018. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/
'use strict'

import React from 'react'
import moment from 'moment'
import lodash from 'lodash'
import jsYaml from 'js-yaml'
import YamlParser from '../../lib/client/yaml-helper'
import msgs from '../../nls/platform.properties'
import { Tag, CodeSnippet } from 'carbon-components-react'
import CopyToClipboard from 'react-copy-to-clipboard'

/*
* UI helpers to help with data transformations
* */

export const transform = (resource, key, locale) => {
  let value = lodash.get(resource, key.resourceKey)
  if (key.type === 'timestamp') {
    return moment.unix(value).format('MMM Do YYYY \\at h:mm A')
  } else if (key.type === 'i18n') {
    return msgs.get(key.resourceKey, locale)
  } else if (key.type === 'boolean') {
    value = (new Boolean(value)).toString()
    return msgs.get(value, locale)
  } else if (key.transformFunction && typeof key.transformFunction === 'function') {
    return key.transformFunction(resource, locale, key.resourceKey)
  } else if (key.type === 'tag') {
    var data = key.getData(resource)
    /* eslint-disable-next-line react/no-array-index-key */
    return data ? data.map((tagText, index) => <Tag key={`tag-${index}`} style={{display: 'inline-block'}} type={'beta'} title={tagText.title}>{tagText.value ? `${tagText.name}:${tagText.value}` : tagText.name}</Tag>) : '-'
  } else {
    return (value || value === 0) ? value : '-'
  }
}

export const getLabelsToString = (item, locale, labelsKey) => {
  labelsKey = labelsKey || 'labels'
  const labels = lodash.get(item, labelsKey)
  const labelKeys = labels && Object.keys(labels)
  if (labelKeys && labelKeys.length > 0) {
    let str = ''
    for (var key of labelKeys) {
      str += key + '=' + labels[key] + ','
    }
    return str.substring(0, str.length - 1)
  } else {
    return '-'
  }
}

export function getLabelsToList(item, locale, labelsKey) {
  labelsKey = labelsKey || 'labels'
  const labels = lodash.get(item, labelsKey)
  if (!labels || Object.keys(labels).length===0) {
    return '-'
  }
  return <ul>
    {lodash.map(labels, (value, key) => {
      try {
        // show json as snippet
        if (typeof value !== 'object') {
          value = JSON.parse(value)
        }
        value = JSON.stringify(value, null, 2)
        return (
          <li key={key + value} style={{display:'block'}}>
            <b>{key}</b>{' ='}
            <CopyToClipboard text={value}>
              <CodeSnippet
                className='removeCopyButton' //Currently used to remove copy button of conde snippet in application detail page  - Adam
                type='multi'
                feedback={msgs.get('button.copyButton.feedback', locale)}>
                {value}
              </CodeSnippet>
            </CopyToClipboard>
          </li>
        )
      } catch (e) {
        return (
          <li key={key + value} style={{display:'block'}}>
            <b>{`${key}`}</b>{` = ${value !== '' ? value : '""'}`}
          </li>
        )
      }
    })}
  </ul>
}

export const getTabs  = (tabs, getUrl) => {
  return tabs.map((tab, index) => {
    return {
      id: `${tab}-tab`,
      label: `tabs.${tab}`,
      url: getUrl(tab, index)
    }
  })
}


export const getAge = (item, locale, timestampKey) => {
  const key = timestampKey ? timestampKey : 'created'
  const createdTime = lodash.get(item, key)
  if (createdTime && createdTime.includes('T')) {
    return moment(createdTime, 'YYYY-MM-DDTHH:mm:ssZ').fromNow()
  } else if (createdTime) {
    return moment(createdTime, 'YYYY-MM-DD HH:mm:ss').fromNow()
  }
  return '-'
}


export const dumpAndSync = (item, keys) => {

  // remove the system stuff
  const system = ['creationTimestamp', 'status', 'selfLink', 'uid', 'annotations']
  const removeMeta = (obj) => {
    for (const key in obj) {
      if (system.indexOf(key)!==-1) {
        delete obj[key]
      } else if (typeof obj[key] === 'object') {
        removeMeta(obj[key])
      }
    }
  }
  removeMeta(item)


  // use this to sort the keys generated by safeDump
  const sortKeys = (a,b) => {
    if (a==='name' && b!=='name') {
      return -1
    } else if (a!=='name' && b==='name') {
      return 1
    }
    return a.localeCompare(b)
  }

  // dump the raw data into yaml sections
  let yaml, row=0
  const yamls = []
  if (item.raw) {
    yaml = jsYaml.safeDump(item.raw, {sortKeys})
    // create objects from the dumped yaml to create with row #'s
    item.synced = new YamlParser().parse(yaml)
    row += yaml.split('\n').length
    yamls.push(yaml)
  }

  // then dump the arrays within item
  keys.forEach(key=>{
    const arr = item[key]
    if (Array.isArray(arr)) {
      arr.forEach(member=>{
        if (member.raw) {
          yaml = jsYaml.safeDump(member.raw, {sortKeys})
          // create objects from the dumped yaml to create with row #'s
          member.synced = new YamlParser().parse(yaml, row)
          member.synced.$r = row
          row += yaml.split('\n').length
          yamls.push(yaml)
        }
      })
    }
  })
  return yamls.join('---\n')
}


export const getResourceType = (item, locale, key) => {
  return key ? lodash.get(item, key) : item.resourceType
}
